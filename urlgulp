#!/usr/bin/perl

###################################################
# Default Settings

$interface = "eth0";
$interval = 5;
$print_urls = 1;

# $url_trunc_first = "tail";
# $url_trunc_first = "path";
$url_trunc_first = "balanced";

$group_really_long_urls = 0;
$really_long_thres = 100;

$debug = 0;
$tcp_only = 0;
$wait_quiet = 0;

###################################################

sub usage
{
    print "Usage: urlgulp [options] [-i interface]\n\n";
    print "  -d delay     interval between updates (seconds).\n";
    print "  -q           Quiet mode. Don't log urls, only domains.\n";
    print "  -r           Raw mode, just dump it all. No url coloring, grouping or truncating.\n";
    print "  -v           Debug mode (use twice for more).\n";
    print "  -w           wait until all is quiet for an interval to display.\n";
    print "               default: display every interval.\n";
    print "  --tcp-only   only track tcp connections (no urls)\n";
    print "               useful with proxies to see which ip's are connected to.\n";
    exit(1);
}

%color = ( "wb" => "\033[40;37;1m",  # white bold
	   "rb" => "\033[40;31;1m",  # red bold
	   "yb" => "\033[40;33;1m",  # yellow bold
	   "pb" => "\033[40;35;1m",  # purple bold
	   "bb" => "\033[40;34;1m",  # blue bold
	   "cb" => "\033[40;36;1m",  # cyan bold
	   "e" => "\033[0m");
my $color_seq_len = 14;
my $columns = `tput cols`;
my $url_spc = "                    ";

for (; @ARGV != 0; shift(@ARGV))
{
    if ($ARGV[0] eq "-q")
    {
	$print_urls = 0;
	next;
    }
    if ($ARGV[0] eq "-r")
    {
	$print_urls = 2;
	next;
    }
    if ($ARGV[0] eq "--tcp-only")
    {
	$tcp_only = 1;
	next;
    }
    if ($ARGV[0] eq "-i")
    {
	shift(@ARGV);
	$interface = $ARGV[0];
	next;
    }
    if ($ARGV[0] eq "-d")
    {
	shift(@ARGV);
	$interval = $ARGV[0];
	next;
    }
    if ($ARGV[0] eq "-w")
    {
	$wait_quiet = 1;
	next;
    }
    if ($ARGV[0] eq "-v")
    {
	$debug++;
	next;
    }

    usage();
}

# Turn off buffering on stdout
$|=1;

##############################################################
# http dump

my $cmd1 = "urlsnarf -n -i $interface";
#my $cmd1 = "cat testurltrunc.log";

##############################################################
# non http dump
# TODO: log udp traffic
# TODO: log ipv6 traffic

my $pcap_filter = "udp port 53 or (not tcp port 80 and tcp[tcpflags] = tcp-syn)";
if ($tcp_only)
{  $pcap_filter = "udp port 53 or                      tcp[tcpflags] = tcp-syn "; }
my $cmd2 ="tcpdump -s 500 -l -n -i $interface '$pcap_filter'"; 

my %dns_req;
my %rev_dns;

my %dns_alias;
my %filtered_cdns = (
    "akamai.net" => 1,
    "akadns.net" => 1, 
    "akamaiedge.net" => 1,
    "bluehatnetwork.com" => 1,
    "cachefly.net" => 1,
    "cdngc.net" => 1,
    "cubecdn.net" => 1,
    "cedexis.net" => 1,
    "cloudfront.net" => 1,
    "cloudflare.com" => 1,
    "cotcdn.net" => 1,
    "dnspro.org" => 1,
    "edgekey.net" => 1,
    "edgecastcdn.net" => 1,
    "edgesuite.net" => 1,
    "fastly.net" => 1,
    "footprint.net" => 1,
    "hwcdn.net" => 1,
    "instacontent.net" => 1,
    "internapcdn.net" => 1,
    "llnwd.net" => 1,
    "lxdns.com" => 1,
    "mirror-image.net" => 1,
    "netdna-cdn.com" => 1,
    "panthercdn.com" => 1,
    "simplecdn.net" => 1,
    "swiftcdn1.com" => 1,
    "upcache.com" => 1,
    "voxcdn.net" => 1,
    "yahoodns.net" => 1);
    
    
##############################################################
# summary display

my %req_by_host;
my @servers; # servers in request order
my $chunk_begin = 1;
# for accounting only:
my %dns_requests;                  # dns requests in the interval (by req no.)
my %dns_hosts;			   # hosts requested (all time)
my %dns_hosts_before;		   # hosts requested (all time) before interval
my %dns_hosts_interval;            # hosts requested in the interval

sub max
{
    my ($a, $b) = @_;
    return ($a < $b ? $b : $a);
}

sub min
{
    my ($a, $b) = @_;
    return ($a < $b ? $a : $b);
}

sub get_domain
{
    my ($h) = @_;
    my $i = rindex($h, ".");
    my $j = rindex($h, ".", $i - 1);
    if ($i - $j == 3) # .co.uk style domain
    { $j =  rindex($h, ".", $j - 1); }
    if ($j != -1)
    { return substr($h, $j+1); }
    return $h;
}

sub leaked_referer
{
    my ($host, $referer) = @_;
    if ($referer =~ m|http://([^/]*)|)
    {
	my $ref_host = $1;
	return ($ref_host ne $host);
    }
    return 0;
}

# Naming:
#   url   http://www.google.com/abc/def/foo.js?abcd=efgh
#   host         www.google.com
#   path                       /abc/def/foo.js?abcd=efgh
#   dir                        /abc/def
#   file                                foo.js
#   tail                                      ?abcd=efgh

sub pretty_print_url
{
    my ($host) = @_;
    # display summary for images
    my $images = 0, $css = 0;
    foreach my $req (@{$req_by_host{$host}})
    { 
	my ($path, $referer, $method) = split(/\|/, $req);
	my $leaked_ref = leaked_referer($host, $referer);
	my $special_notice = ($leaked_ref || $method eq "POST");

	my $head = (($leaked_ref ? "ref!" : "") . 
		    ($method eq "POST" ? "post" : "") . 
		    $url_spc);
	$head = sprintf("%.*s", length($url_spc), $head);
	
	if ($path =~ m/\.(png|jpg|jpeg|gif|ico)$/i &&
	    !$special_notice &&
	    ($group_really_long_urls || length($path) < $really_long_thres))
	{   $images++; next; }

	if ($path =~ m/\.(css)$/i &&
	    !$special_notice &&
	    ($group_really_long_urls || length($path) < $really_long_thres))
	{   $css++; next; }

	$path =~ m|^([^?&:]*)/([^/?&:]*)(.*)$| || die("should not happen: '$path'");
	my ($dir, $file, $tail) = ($1, $2, $3);
	my $line = "$head$path";

	# truncate urls to term's width
	if (length("$line") > $columns)
	{
	    # if dir too long, truncate it ...
	    if ($url_trunc_first eq "path" &&
		length("$head$dir/$file$tail") > $columns)
	    { 
		my $len = max($columns - length("${head}[..]/$file$tail"), 0);
		$dir = "[..]" . substr($dir, max(length($dir) - $len, 0), $len);
	    }				   
	    
	    if ($url_trunc_first eq "tail" &&
		length("$head$dir/$file?") > $columns)
	    { 
		my $len = max($columns - length("${head}[..]/$file?"), 0);
		$dir = "[..]" . substr($dir, max(length($dir) - $len, 0), $len);
	    }

	    if ($url_trunc_first eq "balanced" &&
		length("$head$dir/$file$tail") > $columns)
	    { 
		my $avail = max($columns - length("${head}[..]/$file?"), 0);
		my $tailn = min(length($tail), $avail / 2);
		my $len = $avail - $tailn;
		if ($len < length($dir))
		{
		    $dir = "[..]" . substr($dir, length($dir) - $len, $len);
		}
	    }

	    # ... truncate end if needed
	    $line = substr("$head$dir/$file$tail", 0, $columns);
	}
	# highlight file
	my $file_color = $color{wb};
	$file_color = $color{bb} if ($file =~ m|\.js|);
	$line =~ s|^([^?&:]*)/([^/?&:]*)(.*)$|$1/$file_color$2$color{e}$3|;

	# highlight ref! and post!
	$line =~ s/ref!/$color{rb}ref!$color{e}/;
	$line =~ s/post!/$color{yb}post!$color{e}/;
	print "$line\n";
    }

    if ($images)
    { printf("${url_spc}[$color{wb}images$color{e}: $images]\n"); }
    if ($css)
    { printf("${url_spc}[$color{wb}css$color{e}: $css]\n"); }
}

sub dns_alias_for_other_domain
{
    my ($host) = @_;
    my $domain = get_domain($host);
    foreach my $a (@{$dns_alias{$host}})
    {
	if (get_domain($a) ne $domain)
	{ return 1; }
    }
    return 0;
}

sub get_dns_aliases
{
    my ($host) = @_;
    my $dns_aliases = "";
    if (dns_alias_for_other_domain($host) ||
	$print_urls == 2)
    {
	$dns_aliases = join(", ", @{$dns_alias{$host}});
	$dns_aliases = " = $dns_aliases" if ($dns_aliases ne "");
	$dns_aliases = sprintf("%*s", $columns - 42, $dns_aliases);
	if (dns_alias_for_other_domain($host))
	{ $dns_aliases = "$color{rb}$dns_aliases$color{e}"; }
    }
    return $dns_aliases;
}

# Summary of dns requests. (to log everything use -d)
sub print_dns_reqs
{
    my $nreq = keys(%dns_requests);
    return if ($nreq == 0);
    my $str = "$color{bb}DNS:$nreq$color{e}";
    my $extra = "";

    # duplicates
    my $dups = $nreq - keys(%dns_hosts_interval);
    if ($dups)
    { $extra .= "$color{rb}$dups dup$color{e}"; }

    # already requested hosts
    my $new_reqs = keys(%dns_hosts) - keys(%dns_hosts_before);
    my $n = keys(%dns_hosts_interval) - $new_reqs;
    if ($n)
    { $extra .= ($extra eq "" ? "" : " ") . 
	  "$color{pb}$n rpt$color{e}"; 
    }
    
    $extra = ($extra eq "" ? "" : "($extra)");
    print "$str $extra\n";
}

sub print_reqs
{
    my $current_domain = get_domain($servers[0]);

    print_dns_reqs();
    foreach my $host (@servers)
    {
	my $n = @{$req_by_host{$host}};
	my $port = "";
	if ($host =~ m|(.*):(.*)|)
	{
	    $host = $1;
	    $port = ":$2";
	}

	# evil stuff -> red color
	my ($color_in, $color_out) = ($color{yb}, $color{e});
	if (get_domain($host) ne $current_domain)
	{ ($color_in, $color_out) = ($color{rb}, $color{e}); }	

	my $s = sprintf("%30s%-6s [$n]%s", $host, $port, get_dns_aliases($host));
	printf("%s%s%s\n", $color_in, $s, $color_out);

	if ($print_urls == 1)
	{ pretty_print_url($host); }

	if ($print_urls == 2)
	{
	    foreach my $req (@{$req_by_host{$host}})
	    { 
		my ($path, $referer) = split(/"/, $req);
		printf("$url_spc%s\n", $path); 
	    }
	}
    }
    print "\n";

    %req_by_host = ();
    @servers = ();
    $chunk_begin = 1;
    %dns_requests = ();
    %dns_hosts_interval = ();
    %dns_hosts_before = %dns_hosts;
}
$SIG{ALRM} = sub { print_reqs(); };

sub add_request
{
    my ($host, $path, $referer, $method) = @_;
    if (!$req_by_host{$host})
    { push(@servers, $host); }
    push(@{$req_by_host{$host}}, "$path|$referer|$method");
    
    if ($wait_quiet)
    {  alarm $interval;	}
    else
    {
	if ($chunk_begin)
	{
	    $chunk_begin = 0;
	    alarm $interval;
	}
    }
}

##############################################################

# what a hack ... =)
if (!$tcp_only)
{ open(IN, " $cmd2 & exec $cmd1 | "); }
else
{ open(IN, " $cmd2 | "); }

while (my $s = <IN>)
{
    ##############################################################
    # http dump

    # 192.168.1.102 - - [11/Mar/2012:15:24:15 +0100] "GET http://portail.free.fr/im_zapette/mini_17390.jpg HTTP/1.1" - - "http://portail.free.fr/" "Opera/9.80 (X11; Linux i686; U; en) Presto/2.9.168 Version/11.50"
    # 192.168.1.102 - - [11/Mar/2012:15:21:52 +0100] "POST http://www.javascript-coder.com/files/htm-form-tutorial/html-form-tutorial-example-1.html HTTP/1.1" - - "http://www.javascript-coder.com/files/htm-form-tutorial/html-form-tutorial-example-1.html" "Opera/9.80 (X11; Linux i686; U; en) Presto/2.9.168 Version/11.50"
    if ($s =~ m|"(GET) http://([^/]*)(/[^ ]*) HTTP[^"]*" - - "([^"]*)"|   ||
	$s =~ m|"(POST) http://([^/]*)(/[^ ]*) HTTP[^"]*" - - "([^"]*)"|)
    {
	my ($method, $host, $path, $referer) = ($1, $2, $3, $4);
	#printf("%s|%s|%s\n", $host, $path, $referer, $method);
	add_request($host, $path, $referer, $method);
	next;
    }

    ##############################################################
    # non http dump

    if ($s =~ m/\[\|([a-z]*)\]/)    
    {
	my $proto = $1;
	print "WARNING: tcpdump: truncated packet ($proto), increase -s\n";
    }


    # dns:
    # 13:23:11.498652 IP 192.168.1.102.37199 > 192.168.1.1.53: 28106+ A? imp.free.fr. (29)
    # 13:23:11.527717 IP 192.168.1.1.53 > 192.168.1.102.37199: 28106 1/0/0 A 212.27.48.1 (45)

    # 14:07:06.541093 IP 192.168.1.102.45903 > 192.168.1.1.53: 36366+ A? yahoo.com. (27)
    # 14:07:06.542041 IP 192.168.1.1.53 > 192.168.1.102.45903: 36366 3/0/0 A 98.139.183.24, A 98.139.127.62, A 209.191.122.70 (75)
    # 14:07:06.863547 IP 192.168.1.102.48173 > 192.168.1.1.53: 38339+ A? www.yahoo.com. (31)
    # 14:07:06.892851 IP 192.168.1.1.53 > 192.168.1.102.48173: 38339 4/0/0 CNAME fp3.wg1.b.yahoo.com., CNAME eu-fp3-lfb.wa1.b.yahoo.com., CNAME eu-fp3.wa1.b.yahoo.com., A 87.248.112.181 (121)

    # Example of DNS Alias to another Domain:
    # 19:50:26.437890 IP 192.168.1.102.44541 > 192.168.1.1.53: 44119+ A? stats.wired.com. (33)
    # 19:50:26.467811 IP 192.168.1.1.53 > 192.168.1.102.44541: 44119 20/3/3 CNAME condenast.112.2o7.net., A 66.235.138.18, ...

    # dns request
    if ($s =~ m|> [0-9.]*\.53: ([0-9]*)[+]* A\? (.*)\.|)    
    {
	my ($reqn, $host) = ($1, $2);
	$dns_req{$reqn} = $host;
	# accounting
	$dns_requests{$reqn} = 1;
	$dns_hosts{$host} = 1;
	$dns_hosts_interval{$host} = 1;
	if ($debug >= 2) { print "DNS request [$reqn] $host\n"; }
	next;
    }

    # successful dns reply
    if ($s =~ m|[0-9.]*\.53 > .*: ([0-9]*)[-*]* [0-9]+/[0-9]+/[0-9]+( .*)|)
    {
	my ($reqn, $ans) = ($1, $2);
	my $host = $dns_req{$reqn};
	if ($host eq "")
	{ 
	    print "WARNING: dns reply with no matching dns request...\n"; 
	    next;
	}
	if ($debug) { print "DNS reply   [$reqn] $host: "; }

	my @tab = split(/,/, $ans);
	@{$dns_alias{$host}} = ();
	foreach my $a (@tab)
	{
	    if ($a =~ m| A ([0-9.]*)|)
	    {
		my $ip = $1;
		$rev_dns{$ip} = $host;
		if ($debug) { print "$ip "; }
		next;
	    }

	    # DNS Alias
	    if ($a =~ m| CNAME (.*)\.|)
	    {
		my $name = $1;
		if ($debug >= 2) { print "=$name "; }
		# filter out provider stuff
		if (!$filtered_cdns{get_domain($name)})
		{ 
		    if ($debug == 1) { print "=$name "; }
		    push(@{$dns_alias{$host}}, $name); 
		}
	    }
	}
	if ($debug) { print "\n"; }
	next;
    }

    # ipv6 dns request
    if ($s =~ m|> [0-9.]*\.53: ([0-9]*)\+ AAAA\? (.*)\.|)    
    {
	my $host = $2;
	print "WARNING: ipv6 DNS request for $host. I'm not hanlding ipv6!\n";
	next;
    }

    # tcp syn (ex: https):
    # 12:48:01.297490 IP bilbo-netbook.43708 > router.https: Flags [S], seq 2842818660, win 5840, options [mss 1460,sackOK,TS val 111719333 ecr 0], length 0

    if ($s =~ m|> ([0-9.]*)\.([^.]*):.*Flags|)
    {
	my ($ip, $port) = ($1, $2);
	my $host = $ip;
	$host = $rev_dns{$ip} if ($rev_dns{$ip} ne "");
	# printf("%s:%s|???\n", $host, $port);
	add_request("$host:$port", "???", "-", "-");

	next;
    }

    ##############################################################
    
    print $s;
}

